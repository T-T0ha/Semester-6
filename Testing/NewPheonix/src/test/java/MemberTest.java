import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;

import java.time.Duration;
import java.util.*;

public class MemberTest {
  private WebDriver driver;
  private JavascriptExecutor js;
  private AddMemberPage addMemberPage; // Declare the Page Object

  @Before
  public void setUp() {
    WebDriverManager.firefoxdriver().setup(); // Optional: manages driver binaries
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    driver.manage().window().setSize(new Dimension(862, 993));
    addMemberPage = new AddMemberPage(driver); // Initialize the Page Object
  }

  @After
  public void tearDown() {
    driver.quit();
  }

  @Test
  public void addMember() {
    // Test name: AddMember
    addMemberPage.open();
    driver.manage().window().setSize(new Dimension(823, 993)); // This might be better handled in setUp or a base test class

    addMemberPage.clickPlusButton();
    addMemberPage.enterMemberEmail("king@toha.com");
    addMemberPage.clickSubmitButton();

    assertTrue("Member was not added successfully", addMemberPage.isMemberAddedSuccessfully());
  }
}



//// Generated by Selenium IDE
//import io.github.bonigarcia.wdm.WebDriverManager;
//import org.junit.Test;
//import org.junit.Before;
//import org.junit.After;
//import static org.junit.Assert.*;
//import static org.hamcrest.CoreMatchers.is;
//import static org.hamcrest.core.IsNot.not;
//import org.openqa.selenium.By;
//import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.firefox.FirefoxDriver;
//import org.openqa.selenium.chrome.ChromeDriver;
//import org.openqa.selenium.remote.RemoteWebDriver;
//import org.openqa.selenium.remote.DesiredCapabilities;
//import org.openqa.selenium.Dimension;
//import org.openqa.selenium.WebElement;
//import org.openqa.selenium.interactions.Actions;
//import org.openqa.selenium.support.ui.ExpectedConditions;
//import org.openqa.selenium.support.ui.WebDriverWait;
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.Alert;
//import org.openqa.selenium.Keys;
//
//import java.time.Duration;
//import java.util.*;
//import java.net.MalformedURLException;
//import java.net.URL;
//
//public class MemberTest {
//  private WebDriver driver;
//  private WebDriverWait wait;
//  private Map<String, Object> vars;
//  JavascriptExecutor js;
//
//  @Before
//  public void setUp() {
//    WebDriverManager.firefoxdriver().setup(); // Optional: manages driver binaries
//    driver = new FirefoxDriver();
//    js = (JavascriptExecutor) driver;
//    wait = new WebDriverWait(driver, Duration.ofSeconds(15));
//    vars = new HashMap<>();
//    driver.manage().window().setSize(new Dimension(862, 993));
//  }
//
//  @After
//  public void tearDown() {
//    driver.quit();
//  }
//
//  @Test
//  public void addMember() {
//    // Test name: AddMember
//    // Step # | name | target | value
//    // 1 | open | /boards/2-add |
//    driver.get("http://localhost:4000/boards/2-add");
//
//    // 2 | setWindowSize | 823x993 |
//    driver.manage().window().setSize(new Dimension(823, 993));
//
//    // 3 | click | css=.fa-plus |
//    WebElement plusButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".fa-plus")));
//    plusButton.click();
//
//    // 4 | click | id=crawljax_member_email |
//    WebElement emailField = wait.until(ExpectedConditions.elementToBeClickable(By.id("crawljax_member_email")));
//    emailField.click();
//
//    // 5 | type | id=crawljax_member_email | king@toha.com
//    emailField.sendKeys("king@toha.com");
//
//    // 6 | click | css=button |
//    WebElement submitButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button")));
//    submitButton.click();
//
//    // 7 | assertElementPresent | css=li:nth-child(2) > .react-gravatar | king toha
//    WebElement memberElement = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("li:nth-child(2) > .react-gravatar")));
//    assertTrue(memberElement.isDisplayed());
//  }
//}
////  @Test
////  public void signUp() {
////    driver.get("http://localhost:4000/sign_in");
////
////    wait.until(ExpectedConditions.elementToBeClickable(By.linkText("Create new account"))).click();
////
////    WebElement firstName = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user_first_name")));
////    firstName.sendKeys("toha");
////    firstName.sendKeys(Keys.ENTER);
////
////    WebElement lastName = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user_last_name")));
////    lastName.sendKeys("kitty");
////    lastName.sendKeys(Keys.ENTER);
////
////    WebElement email = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user_email")));
////    email.sendKeys("toha@kutty.com");
////    email.sendKeys(Keys.ENTER);
////
////    // Correct the email if needed
////    email = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user_email")));
////    email.clear();
////    email.sendKeys("tohaa@kitty.com");
////    email.sendKeys(Keys.ENTER);
////
////    WebElement password = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user_password")));
////    password.sendKeys("hellokitty");
////    password.sendKeys(Keys.ENTER);
////
////    WebElement confirmPassword = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user_password_confirmation")));
////    confirmPassword.sendKeys("hellokitty");
////    confirmPassword.sendKeys(Keys.ENTER);
////
////    WebElement nameSpan = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("span:nth-child(3)")));
////    assertThat(nameSpan.getText(), is("toha kitty"));
////  }
////}